rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for contact form
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidMessage(message) {
      return message.size() >= 10 && message.size() <= 1000;
    }

    function isValidName(name) {
      return name.matches('^[a-zA-Z\\s-]{2,50}$');
    }

    // Allow read access to all collections
    match /projects/{projectId} {
      allow read: if true;
      // Simplified claps update rule
      allow update: if
        request.resource.data.keys().hasOnly(resource.data.keys()) &&  // No new fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['claps']) &&  // Only claps changed
        request.resource.data.claps is number;  // Must be a number
      allow create, delete: if false;
    }
    
    // Simplified rules for project claps
    match /projectClaps/{projectId} {
      allow read: if true;
      allow write: if true;
    }
    
    match /skills/{document} {
      allow read: if true;
      allow write: if false;
    }

    match /upskilling/{document} {
      allow read: if true;
      allow write: if false;
    }

    match /graduation/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /testimonials/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /timeline/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /about/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /contact/{document} {
      allow read: if false;
      allow create: if
        // Required fields validation
        request.resource.data.firstName is string &&
        isValidName(request.resource.data.firstName) &&
        request.resource.data.email is string &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.message is string &&
        isValidMessage(request.resource.data.message) &&
        
        // Optional fields validation
        (!('lastName' in request.resource.data) || 
          (request.resource.data.lastName is string && 
           isValidName(request.resource.data.lastName))) &&
        (!('projectType' in request.resource.data) || 
          (request.resource.data.projectType is string && 
           request.resource.data.projectType.size() <= 100)) &&
        
        // Required metadata
        request.resource.data.createdAt is string;
        
      allow update, delete: if false;
    }
    
    match /hero/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /stats/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /certificates/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /affiliations/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /awards/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    match /publications/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // Default rule - deny everything else
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}